type Query {
	spell(ID: ID!): Spell
	spells: [Spell!]
	skill(ID: ID!): Skill
	skills: [Skill!]
	character(ID: ID!): Character
	characters: [Character!]
	race(ID: ID!): Race
	races: [Race!]
	background(ID: ID!): Background
	backgrounds: [Background!]
	class(ID: ID!): Class
	classes: [Class!]
	weapon(ID: ID!): Weapon
	weapons: [Weapon!]
	armor(ID: ID!): Armor
	armors: [Armor!]
	adventuringGear(ID: ID!): AdventuringGear
	adventuringGears: [AdventuringGear!]
	gearPacks: [GearPack!]
}

type Spell {
	ID: ID!
	name: String!
	level: Int
	school: String
	castingTime: String
	range: String
	components: String
	duration: String
	description: String
}

type Skill {
	ID: ID!
	name: String!
	ability: String!
}

type Character {
	ID: ID!
	name: String
	HP: Int
	maxHP: Int!
	abilityScores: AbilityScores!
	gp: Int
	sp: Int
	cp: Int
	race: Race!
	subrace: Subrace
	skills: [Skill]
	background: Background
	class: Class!
	# customItems:
	# tools:
	deathsaves: Deathsaves!
	inventory: [Item!]
}

type AbilityScores {
  str: Int!
  dex: Int!
  con: Int!
  int: Int!
  wis: Int!
  cha: Int!
}

type Race {
	ID: ID!
	name: String!
	subraces: [Subrace]!
}

type Subrace {
	ID: ID!
	name: String!
}

type Background {
	ID: ID!
	name: String!
	description: String!
	numExtraLanguages: Int
	startingGp: Int
}

type Class {
	ID: ID!
	name: String!
	hitDice: String!
	numSkillProficiencies: Int!
	savingThrowProficiencies: [String!]
}

type Deathsaves {
  successes: Int!
  failures: Int!
}

"""
Items
"""

union Item = QuantifiedWeapon | QuantifiedArmor | QuantifiedAdventuringGear

# This implementation of GraphQL is dumb and expects resolvers
# for an interface
# interface Item {
#   ID: ID!
#   name: String!
#   type: String!
#   cost: String
#   weight: String
# }

type Weapon {
	ID: ID!
	name: String!
  itemType: String!
	damage: String
	skillType: String!
	rangeType: String!
	cost: String
	weight: String
}

type QuantifiedWeapon {
	ID: ID!
	name: String!
  itemType: String!
	damage: String
	skillType: String!
	rangeType: String!
	cost: String
	weight: String
	quantity: Int!
}

type Armor {
	ID: ID!
	name: String!
  itemType: String!
	ac: Int!
	isDexAdded: Boolean!
	maxDex: Int
	disadvantageOnStealth: Boolean!
	cost: String
	weight: String
}

type QuantifiedArmor {
	ID: ID!
	name: String!
  itemType: String!
	ac: Int!
	isDexAdded: Boolean!
	maxDex: Int
	disadvantageOnStealth: Boolean!
	cost: String
	weight: String
	quantity: Int!
}

type AdventuringGear {
  ID: ID!
  name: String!
  itemType: String!
  description: String
  category: String
  categoryDescription: String
  cost: String
  weight: String
}

type QuantifiedAdventuringGear {
  ID: ID!
  name: String!
  itemType: String!
  category: String
  categoryDescription: String
  description: String
  cost: String
  weight: String
  quantity: Int!
}

type GearPack {
	ID: ID!
	name: String!
	cost: String!
	weight: String!
	items: [GearPackItem]
}

union GearPackItem = QuantifiedAdventuringGear | QuantifiedTool

type QuantifiedTool {
  ID: ID!
  name: String!
  itemType: String!
  description: String
  category: String
  cost: String
  weight: String
	quantity: Int!
}

# type GearPackAdventuringGear {
# 	ID: ID!
# 	name: String!
# 	itemType: String!
# 	category: String
# 	categoryDescription: String
# 	description: String
# 	cost: String
# 	weight: String
# 	quantity: Int!
# }